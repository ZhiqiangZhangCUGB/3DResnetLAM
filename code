import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

class DepthwiseSeparableConv3d(nn.Module):
    def __init__(self, in_channels, kernel_size, padding):
        super(DepthwiseSeparableConv3d, self).__init__()
        self.depthwise = nn.Conv3d(in_channels, in_channels, kernel_size=kernel_size,
                                   padding=padding, groups=in_channels, bias=False)
        self.pointwise = nn.Conv3d(in_channels, kernel_size=1, bias=False)
    
    def forward(self, x):
        x = self.depthwise(x)
        x = self.pointwise(x)
        return x

class SpatialAttention(nn.Module):
    def __init__(self):
        super(SpatialAttention, self).__init__()
        self.conv1 = DepthwiseSeparableConv3d(2, kernel_size=7, padding=3)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        max_out, _ = torch.max(x, dim=1, keepdim=True)
        avg_out = torch.mean(x, dim=1, keepdim=True)
        x = self.conv1(x)
        return self.sigmoid(x)

class SEBlock(nn.Module):
    def __init__(self, channel, reduction_ratio=16):
        super(SEBlock, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool3d(1)
        self.fc = nn.Sequential(
            nn.Linear(channel, channel // reduction_ratio, bias=False),
            nn.ReLU(inplace=True),
            nn.Linear(channel // reduction_ratio, channel, bias=False),
            nn.Sigmoid()
        )

    def forward(self, x):
        b, c, _, _, _ = x.size()
        y = self.avg_pool(x).view(b, c)
        y = self.fc(y).view(b, c, 1, 1, 1)
        return x * y.expand_as(x)

class ResBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1):
        super(ResBlock, self).__init__()
        self.conv1 = nn.Conv3d(in_channels, out_channels, kernel_size=3)
        self.bn1 = nn.BatchNorm3d(out_channels)
        self.conv2 = nn.Conv3d(out_channels, out_channels, kernel_size=3)
        self.bn2 = nn.BatchNorm3d(out_channels)
        self.lam = SEBlock(out_channels)  
        self.sa = SpatialAttention() 

        self.shortcut = nn.Sequential()
        if stride != 1 or in_channels != out_channels:
            self.shortcut = nn.Sequential(
                nn.Conv3d(in_channels, out_channels, kernel_size=1, stride=stride),
                nn.BatchNorm3d(out_channels)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out = self.lam(out)
        out = out * self.sa(out)
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class Deep3DCNNAttentionsimple(nn.Module):
    def __init__(self, num_classes=2):
        super(Deep3DCNNAttentionsimple, self).__init__()
        self.conv1 = nn.Conv3d(7, 128, kernel_size=(3, 3, 3))
        self.pool = nn.MaxPool3d(kernel_size=2, stride=2)
        self.resblock1 = ResBlock(64, 128)
        self.resblock2 = ResBlock(128, 128)
        self.fc1 = nn.Linear(128, num_classes)  

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.resblock1(x)
        x = self.resblock2(x)
        x = F.adaptive_avg_pool3d(x, (1, 1, 1))
        x = self.fc1(x)
        return x
model = Deep3DCNNAttentionsimple(num_classes=2)
print(model)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = Deep3DCNNAttentionsimple().to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()

num_epochs = 200
for epoch in range(num_epochs):
    model.train()
    for data, labels in train_loader:
        data, labels = data.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(data)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch+1}, Loss: {loss.item()}')
